------------------------- Setting up Project Structure -------------------------

1. Create a GitHub repo and clone it locally:
   git clone <repo-url>
   cd <repo-name>

2. Create a virtual environment:
   python -m venv venv

3. Activate the virtual environment:
   # Windows:
   venv\Scripts\activate
   # Linux/macOS:
   source venv/bin/activate

4. Install cookiecutter:
   pip install cookiecutter

5. Setup project structure using cookiecutter:
   cookiecutter -c v1 https://github.com/drivendata/cookiecutter-data-science

6. Rename src.models → src.model

7. Initial commit:
   git add .
   git commit -m "Initial project structure"
   git push

------------------------- Setup MLFlow on DagsHub -------------------------

8. Go to: https://dagshub.com/dashboard
9. Create > New Repo > Connect GitHub repo
10. Copy experiment tracking URL and code snippet (Go to MLFlow UI)

11. Install MLFlow and DagsHub SDK:
    pip install "mlflow<3" dagshub

12. Run experiment notebooks to log experiments
13. git add - commit - push

------------------------- DVC Setup with Azure Blob Storage -------------------------

14. Initialize DVC:
    dvc init

15. Create a local folder for temporary storage:
    mkdir local_blob

16. Add local DVC remote:
    dvc remote add -d mylocal local_blob

17. Add code to src directory:
    - logger.py
    - data_ingestion.py
    - data_preprocessing.py
    - feature_engineering.py
    - model_building.py
    - model_evaluation.py
    - register_model.py

18. Add pipeline files:
    - params.yaml
    - dvc.yaml (up to model evaluation metrics)

19. Run DVC pipeline:
    dvc repro
    dvc status

20. git add - commit - push

21. Setup Azure Blob Storage as DVC remote:
    pip install dvc[azure] azure-cli
    az login
    dvc remote add -d myremote azure://<container-name>

------------------------- FastAPI App Setup -------------------------

22. Create FastAPI app directory:
    fastapi_app/
       ├─ main.py
       ├─ routes/
       ├─ services/
       ├─ utils/

23. Install FastAPI and Uvicorn:
    pip install fastapi uvicorn

24. Run FastAPI app locally:
    uvicorn main:app --reload

25. Push DVC-tracked data to Azure:
    dvc push

26. Freeze dependencies:
    pip freeze > requirements.txt

------------------------- CI/CD Setup -------------------------

27. Create GitHub Actions workflow:
    .github/workflows/ci.yaml

28. Add DagsHub token and Azure credentials to GitHub secrets

29. Add tests and scripts:
    - tests/  (unit and integration tests)
    - scripts/  (automation scripts for CI/CD)

------------------------- Docker Setup -------------------------

30. Generate requirements for Docker:
    pip install pipreqs
    cd fastapi_app
    pipreqs . --force

31. Add Dockerfile
    - Use environment variables for secrets (DagsHub token, Azure storage keys)

32. Build Docker image:
    docker build -t capstone-app:latest .

33. Run Docker image:
    docker run -p 8888:8000 -e CAPSTONE_TOKEN=<token> capstone-app:latest

34. Optional:
    - Push Docker image to Azure Container Registry (ACR)
    - Pull and run image from ACR on any machine

------------------------- Azure Deployment -------------------------

35. Create Azure Resource Group:
    az group create --name capstone-rg --location eastus

36. Create Azure Virtual Machine for hosting the FastAPI app:
    - Size: Standard_B1s or as required
    - OS: Ubuntu 22.04
    - Allow inbound ports: 22 (SSH), 8000 (FastAPI)

37. SSH into VM:
    ssh <username>@<public-ip>

38. Install Docker and run your Docker image:
    sudo apt update && sudo apt install docker.io -y
    sudo systemctl start docker
    sudo docker run -p 8000:8000 -e CAPSTONE_TOKEN=<token> <image>

39. Verify app is running on VM:
    http://<public-ip>:8000

------------------------- Cleanup -------------------------

40. Stop and remove Docker container:
    sudo docker stop <container-id>
    sudo docker rm <container-id>

41. Delete Azure VM:
    az vm delete --resource-group capstone-rg --name <vm-name> --yes

42. Delete Azure Resource Group (removes all resources including storage):
    az group delete --name capstone-rg --yes --no-wait

------------------------- Notes -------------------------

- Replace all secrets with environment variables or GitHub secrets
- Use Azure Blob Storage for DVC remote storage
- Use Azure Virtual Machine instead of EC2
- Use Azure Container Registry (ACR) instead of ECR
- FastAPI replaces Flask
- MLFlow + DagsHub tracks experiments
- Docker container can run locally or on Azure VM
- CI/CD automates build, test, and deployment steps
